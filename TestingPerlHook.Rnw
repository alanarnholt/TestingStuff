\documentclass{article}
\usepackage[margin=0.5in]{geometry}


<<RpdfcropHOOK, echo = FALSE>>=
knit_hooks$set(crop = hook_pdfcrop)
@
<<setup, echo = FALSE, results= 'hide', message = FALSE, warning = FALSE>>=
library(PASWR2)
opts_chunk$set(comment = NA, fig.show = "hold", fig.height=7, fig.width=7, dev = 'tikz', cache = TRUE, cache.path = './cache/Color/', fig.path = './figure/Color/', prompt = TRUE, highlight = TRUE, tidy = TRUE, tidy.opts=list(blank=TRUE, width.cutoff= 55))
@

\begin{document}


<<c01Example3REPEAT>>=
set.seed(3)  # setting seed for reproducibility
i <- 1
N <- 10^5 - 1  # N = number of simulations
N2mat <- matrix(0, N, 2)  # initialize N*2 matrix to all 0's
repeat{N2mat[i, ] <- sample(1:6, 2, replace = TRUE)
if (i == N) break
i <- i + 1
}
means <- apply(N2mat, 1, mean)
T3 <- table(means)
T3
@

The function \texttt{plot()} is applied to \texttt{T3} after dividing its contents by \texttt{N}.  The result, with a few embellishments, is presented in Figure \ref{c01PLOTMEANS}. 


\begin{figure}[!ht]
\centering
<<c01PLOTMEANSfig, echo = FALSE, dev = "tikz", fig.width = 4, fig.height = 4, out.width='.45\\linewidth', crop = TRUE>>=
par(yaxt="n")
plot(T3/N, xlab = "Mean of Two Dice", ylab = "", 
     main="Simulated Sampling Distribution \n of the Sample Mean",
     ylim=c(0, 6.1/36), lwd = 2, cex.main = 1)
par(yaxt="s")
axis(side=2, at=c(0, 1/36, 2/36, 3/36, 4/36, 5/36, 6/36, 5/36, 4/36, 3/36, 2/36, 1/36), 
     labels=c("0","1/36", "2/36", "3/36", "4/36", "5/36", "6/36", "5/36", 
              "4/36", "3/36", "2/36", "1/36"), las=1 )
abline(h=c(0:6)/36, lty=2, col="gray")
@
\caption{Graphical representation of the relative frequency of each of the possible means from a simulation of throwing two dice 99,999 times \label{c01PLOTMEANS}}
\end{figure}


\bf{NEW STUFF}

\begin{figure}[!ht]
<<c05BivNor3perspFIG,  dev = "tikz", crop = TRUE, fig.align = 'center', fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
f1 <- function(x, y, p = 0){
  exp( (x^2 - 2*p*x*y + y^2) / (-2*(1 - p^2))) / (2*pi*sqrt(1 - p^2))
}
f2 <- function(x, y, p = 0.4){
  exp( (x^2 - 2*p*x*y + y^2) / (-2*(1 - p^2))) / (2*pi*sqrt(1 - p^2))
}
f3 <- function(x, y, p = 0.8){
  exp( (x^2 - 2*p*x*y + y^2) / (-2*(1 - p^2))) / (2*pi*sqrt(1 - p^2))
}
opar <- par(no.readonly = TRUE) # copy of current settings
par(mfrow = c(1, 3), mar = c(1.1,1.1,1.1,1.1), pty = "s")
x <- seq(-3, 3, length = 40)
y <- x
persp(x, y, outer(x, y, f1), xlab = "$x$", ylab = "$y$", zlab = "$z$",
      main = "$\\rho = 0$", theta = -25, expand = .65, phi = 25, shade = .4)
persp(x, y, outer(x, y, f2), xlab = "$x$", ylab = "$y$", zlab = "$z$",
      main = "$\\rho = 0.4$", theta = -25, expand = .65, phi = 25, shade = .4)
persp(x, y, outer(x, y, f3), xlab = "$x$", ylab = "$y$", zlab = "$z$",
      main = "$\\rho = 0.8$", theta = -25, expand = .65, phi = 25, shade = .4)
par(opar)
@
\end{figure}

\pagebreak

<<c05BivNor3contour, eval = TRUE, rcode = TRUE, tidy = FALSE>>=
opar <- par(no.readonly = TRUE) # copy of current settings
par(mfrow = c(1, 3), mar = c(4.1, 4.1, 4.1, 1.1), pty = "s")
x <- seq(-3, 3, length = 50)
y <- x
contour(x, y, outer(x, y, f1), nlevels = 10, xlab = "x", ylab = "y",
        main = expression(rho == 0))
contour(x, y, outer(x, y, f2), nlevels = 10, xlab = "x", ylab = "y", 
        main = expression(rho == 0.4))
contour(x, y, outer(x, y, f3), nlevels = 10, xlab = "x", ylab = "y", 
        main = expression(rho == 0.8))
par(opar)
@



\pagebreak

<<c05BivNor3contourFIG, echo = TRUE, dev = "tikz", crop = TRUE, fig.align = 'center', results = 'hide', fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
opar <- par(no.readonly = TRUE) # copy of current settings
par(mfrow = c(1, 3), mar = c(4.1,4.1,4.1,1.1), pty = "s")
x <- seq(-3, 3, length = 50)
y <- x
contour(x, y, outer(x, y, f1), nlevels = 10, xlab = "$x$", ylab = "$y$",
        main = "$\\rho = 0$")
contour(x, y, outer(x, y, f2), nlevels = 10, xlab = "$x$", ylab = "$y$", 
        main = "$\\rho = 0.4$")
contour(x, y, outer(x, y, f3), nlevels = 10, xlab = "$x$", ylab = "$y$", 
        main = "$\\rho = 0.8$")
par(opar)
@


\pagebreak

<<c05BivNor3image, eval = TRUE, rcode = TRUE, tidy = FALSE>>=
opar <- par(no.readonly = TRUE) # copy of current settings
par(mfrow = c(1, 3), mar = c(4.1, 4.1, 4.1, 1.1), pty = "s")
x <- seq(-3, 3, length = 50)
y <- x
image(x, y, outer(x, y, f1), col  = gray((0:100)/100), xlab = "x", 
      ylab = "y", main = expression(rho == 0))
image(x, y, outer(x, y, f2), col  = gray((0:100)/100), xlab = "x", 
      ylab = "y", main = expression(rho == 0.4))
image(x, y, outer(x, y, f3), col  = gray((0:100)/100), xlab = "x", 
      ylab = "y", main = expression(rho == 0.8))
par(opar)
@


\pagebreak

<<c05BivNor3imageFIG, echo = TRUE, dev = "tikz", crop = TRUE, fig.align = 'center', results = 'hide', fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
opar <- par(no.readonly = TRUE) # copy of current settings
par(mfrow = c(1, 3), mar = c(4.1,4.1,4.1,1.1), pty = "s")
x <- seq(-3, 3, length = 50)
y <- x
image(x, y, outer(x, y, f1), col  = gray((0:100)/100), xlab = "$x$", ylab = "$y$", 
      main = "$\\rho = 0$")
image(x, y, outer(x, y, f2), col  = gray((0:100)/100), xlab = "$x$", ylab = "$y$",
      main = "$\\rho = 0.4$")
image(x, y, outer(x, y, f3), col  = gray((0:100)/100), xlab = "$x$", ylab = "$y$", 
      main = "$\\rho = 0.8$")
par(opar)
@


\pagebreak

<<c05BInormLatFUNC, rcode = TRUE, eval = TRUE, tidy = FALSE>>=
x <- seq(-3, 3, length = 40)
y <- x
z1 <- outer(x, y, f1)
z2 <- outer(x, y, f2)
z3 <- outer(x, y, f3)
Grid <- expand.grid(x = x, y = y)
zp <- c(expression(rho == 0.0), expression(rho == 0.4), 
        expression(rho == 0.8))
wireframe( z1 + z2 + z3 ~ x * y, data = Grid, xlab = "x", ylab = "y", 
          zlab = "z", outer = TRUE, layout = c(3, 1), 
          strip = strip.custom(factor.levels = zp) )
@

\pagebreak

\begin{figure}[!ht]
<<3bivarNORMlatCODE, echo = TRUE, dev = "tikz", crop = TRUE, fig.align = 'center', results = 'hide', fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
x <- seq(-3, 3, length = 40)
y <- x
z1 <- outer(x, y, f1)
z2 <- outer(x, y, f2)
z3 <- outer(x, y, f3)
Grid <- expand.grid(x=x, y=y)
zp <- c("$\\rho = 0$", "$\\rho = 0.4$", "$\\rho = 0.8$")
wireframe(z1 + z2 + z3 ~ x * y, data = Grid, shade = FALSE, xlab = "$x$", ylab = "$y$", 
          zlab = "$z$", outer = TRUE, layout = c(3, 1), 
          strip=strip.custom(factor.levels = zp))
@
\end{figure}

\pagebreak

<<c05BInormLatCONTOUR, rcode = TRUE, eval = TRUE, tidy = FALSE>>=
contourplot(z1 + z2 + z3 ~ x * y, data = Grid, xlab = "x", ylab = "y", 
            outer = TRUE, layout = c(3, 1), aspect = "xy", 
            cuts = 11, strip = strip.custom(factor.levels = zp))
@

\pagebreak

\begin{figure}[!ht]
<<3bivarNORMlatCONTOURcode, echo = TRUE, dev = "tikz", crop = TRUE, fig.align = 'center', results = 'hide', fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
contourplot(z1 + z2 + z3 ~ x * y, data = Grid, xlab = "$x$", ylab = "$y$", 
            outer = TRUE, layout = c(3, 1), aspect = "xy", 
            cuts = 11, strip=strip.custom(factor.levels = zp))
@
\end{figure}

\pagebreak

<<c05BInormLatLEVEL, rcode = TRUE, eval = TRUE, tidy = FALSE>>=
levelplot(z1 + z2 + z3 ~ x * y, data = Grid, xlab = "x", ylab = "y", 
          outer = TRUE, layout = c(3, 1), aspect = "xy",
          strip = strip.custom(factor.levels = zp))
@

\pagebreak

\begin{figure}[!ht]
<<3bivarNORMlatLEVELcode, echo = TRUE, dev = "tikz", crop = TRUE, fig.align = 'center', results = 'hide', fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
levelplot(z1 + z2 + z3 ~ x * y, data = Grid, xlab = "$x$", ylab = "$y$", 
          outer = TRUE, layout = c(3, 1), aspect = "xy",
          strip = strip.custom(factor.levels = zp))
@
\end{figure}

\bf{Start of Problems}


<<c05ggDATA, rcode = TRUE, tidy = FALSE>>=
x <- seq(-3, 3, length = 50)
y <- x
z1 <- outer(x, y, f1)
z2 <- outer(x, y, f2)
z3 <- outer(x, y, f3)
Grid <- expand.grid(x = x, y = y)
DF1 <- data.frame(x = Grid$x, y = Grid$y, z = as.vector(z1))
DF2 <- data.frame(x = Grid$x, y = Grid$y, z = as.vector(z2))
DF3 <- data.frame(x = Grid$x, y = Grid$y, z = as.vector(z3))
DF1$r = "rho == 0.0"
DF2$r = "rho == 0.4"
DF3$r = "rho == 0.8"
BDF <- rbind(DF1, DF2, DF3)
@

\pagebreak

Say something here:

<<c05BInormGGcontour, rcode = TRUE, dev='png', tidy = TRUE, fig.height = 6, fig.width = 6, out.width='1\\linewidth'>>=
ggplot(data = BDF, aes(x = x, y = y, z = z)) +
  stat_contour(aes(colour = ..level..)) + theme_bw() + 
  scale_colour_gradient(low = "gray10", high = "gray90") + 
  labs(colour = "Density", x = "x", y = "y") + 
  facet_grid(. ~ r, labeller = label_parsed) + 
  coord_fixed(ratio = 1)
@

\pagebreak



\end{document}